define([], function() {
/* 
The code in the string returned below is a minified version of
clairnote.ly (version 20170709)

Copyright Â© 2013, 2014, 2015, 2016, 2017 Paul Morris,
except for functions copied and modified from LilyPond source code,
the LilyPond Snippet Repository, and/or openLilyLib
Contact information: http://clairnote.org/about/

clairnote.ly is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this code.  If not, see <http://www.gnu.org/licenses/>.
*/
    return "\\version \"2.18.2\" #(define (non-zero? n) (not (zero? n))) #(define (positive-integer? n) (and (positive? n) (integer? n))) #(define (map-pairs proc . pairs) (cons (reduce proc '() (map car pairs)) (reduce proc '() (map cdr pairs)))) #(define (cn-notehead-pitch grob) (define event (ly:grob-property grob 'cause)) (if (ly:stream-event? event) (ly:event-property event 'pitch) (begin (ly:warning \"clairnote.ly cannot access the pitch of a note head grob. (Are you trying to use the Ambitus_engraver? It is incompatible with clairnote.ly.)\") (ly:make-pitch 0 0 0)))) #(define (cn-notehead-semitone grob) (ly:pitch-semitones (cn-notehead-pitch grob))) #(define (cn-staff-symbol-property grob prop default) (define staff-sym (ly:grob-object grob 'staff-symbol)) (if (ly:grob? staff-sym) (ly:grob-property staff-sym prop) default)) #(define (cn-get-base-staff-space grob) (cn-staff-symbol-property grob 'cn-base-staff-space 0.75)) #(define (cn-magnification grob) (magstep (ly:grob-property grob 'font-size 0))) #(define (cn-get-staff-clef-adjust staff-octaves clef-octave-shift) (+ (* 12 clef-octave-shift) (if (odd? staff-octaves) 6 (if (> staff-octaves 2) 12 0)))) #(define (cn-staff-clef-adjust-from-grob grob) (cn-get-staff-clef-adjust (cn-staff-symbol-property grob 'cn-staff-octaves 2) (cn-staff-symbol-property grob 'cn-clef-shift 0))) #(define (cn-note-heads-from-grob grob default) (let* ((heads-array (ly:grob-object grob 'note-heads)) (heads-list (if (ly:grob-array? heads-array) (ly:grob-array->list heads-array) default))) heads-list)) #(if (not (defined? 'grob::name)) (define (grob::name grob) (assq-ref (ly:grob-property grob 'meta) 'name))) #(if (not (defined? 'lexicographic-list-compare?)) (define (lexicographic-list-compare? op a b) (let* ((ca (car a)) (iseql (op ca ca))) (let loop ((ca ca) (cb (car b)) (a (cdr a)) (b (cdr b))) (let ((axb (op ca cb))) (if (and (pair? a) (pair? b) (eq? axb iseql (op cb ca))) (loop (car a) (car b) (cdr a) (cdr b)) axb)))))) #(if (not (defined? 'ly:version?)) (define (ly:version? op ver) (lexicographic-list-compare? op (ly:version) ver))) #(define (cn-black-note? grob) (even? (cn-notehead-semitone grob))) #(define (cn-whole-note? grob) (< (ly:grob-property grob 'duration-log) 1)) #(define (cn-stylish-note? grob) (define style (ly:grob-property-data grob 'style)) (and (not (null? style)) (memq style '(harmonic harmonic-black harmonic-mixed diamond cross xcircle triangle slash)))) #(define cn-whole-note-black-path '((moveto 0 0) (curveto 0 0.16054432 0.12694192 0.28001904 0.272552 0.35842432) (curveto 0.47416576 0.4666984 0.70564816 0.50776784 0.93339712 0.50776784) (curveto 1.16114576 0.50776784 1.39636192 0.4666984 1.59797568 0.35842432) (curveto 1.74358576 0.28001904 1.87052768 0.16054432 1.87052768 0) (curveto 1.87052768 -0.16054432 1.74358576 -0.2800192 1.59797568 -0.35842448) (curveto 1.39636192 -0.46669856 1.16114592 -0.507768 0.93339712 -0.507768) (curveto 0.70564816 -0.507768 0.47416576 -0.46669856 0.272552 -0.35842448) (curveto 0.12694192 -0.2800192 0 -0.16054432 0 0) (closepath))) #(define cn-whole-note-white-path (append cn-whole-note-black-path '((moveto 1.06033904 -0.36566768) (curveto 1.24701856 -0.36566768 1.32542384 -0.2688184 1.32542384 -0.09707328) (curveto 1.32542384 0.19788 1.10140848 0.36566752 0.80645504 0.36566752) (curveto 0.61977552 0.36566752 0.545104 0.26881824 0.545104 0.09707312) (curveto 0.545104 -0.19788016 0.7653856 -0.36566768 1.06033904 -0.36566768) (closepath)))) #(define (cn-whole-note-stencil grob) (let ((mag (cn-magnification grob)) (wn-path (if (cn-black-note? grob) cn-whole-note-black-path cn-whole-note-white-path))) (ly:stencil-scale (grob-interpret-markup grob (markup (#:override '(filled . #t) (#:path 0.0001 wn-path)))) mag mag))) #(define cn-note-black-path '((moveto 1.0161518991984164 0.5004939160736768) (curveto 1.1900858991984165 0.45804726744838686 1.3000056991984164 0.36006297281891986 1.3267185991984165 0.22365338254444356) (curveto 1.3472530991984164 0.11878494731492373 1.3090816991984164 -0.03242382812749062 1.2346937991984164 -0.14100554722801906) (curveto 1.1037044991984164 -0.3321698541497182 0.8786728091984164 -0.46440803197455877 0.6176073691984164 -0.5036333230878486) (curveto 0.5243774691984164 -0.517643902935715 0.36590771919841636 -0.5120649140876494 0.28844503919841635 -0.49205136745873423) (curveto -0.029717590801583628 -0.40984214143367353 -0.09642331080158363 -0.0917693764989545 0.14752670919841637 0.17990713903061328) (curveto 0.2984087391984164 0.347937968940766 0.5439097091984164 0.4755783490866303 0.7757855691984165 0.5065506656056886) (curveto 0.8399878691984165 0.5151219432426919 0.9695811491984164 0.5118635199715458 1.0161502991984164 0.5005020382431211) (closepath))) #(define cn-note-white-path '((moveto 1.026468864255086 0.4998680875655276) (curveto 1.215249864255086 0.4618436649454002 1.337174464255086 0.35147108531050375 1.354920364255086 0.20252749405141746) (curveto 1.369178964255086 0.08282868839604651 1.312372764255086 -0.07672001395465605 1.209350364255086 -0.20633856802981299) (curveto 1.077365164255086 -0.37239062345611024 0.889153024255086 -0.47211463127579484 0.6458905642550861 -0.5048878796193299) (curveto 0.585101844255086 -0.5130801213612108 0.548868934255086 -0.5134163330622651 0.443309034255086 -0.5067845101638356) (curveto 0.32885581425508603 -0.49958868733223255 0.30882433425508604 -0.4965974421400958 0.260617494255086 -0.47979947287536673) (curveto 0.118058624255086 -0.4300386473948317 0.024819864255086005 -0.335419029253747 0.0042339542550860025 -0.21961971038330325) (curveto -0.015404825744913999 -0.1091556900709823 0.035236334255086 0.05025573233647185 0.132092634255086 0.18283290751856218) (curveto 0.268217284255086 0.3691712451565947 0.47658985425508604 0.48176186299022195 0.730680684255086 0.5062696961187646) (curveto 0.823563584255086 0.5152225290660725 0.965453244255086 0.5121589666760266 1.026469764255086 0.4998666604401908) (closepath) (moveto 0.8920403042550861 0.32723653716982337) (curveto 0.801899114255086 0.305937547790631 0.674353834255086 0.25092305532124815 0.517242874255086 0.16559336664623436) (curveto 0.199745884255086 -0.006853856240945699 0.109727534255086 -0.09774589911519554 0.151265174255086 -0.2039339094078499) (curveto 0.168776074255086 -0.24869436361851288 0.191705974255086 -0.27755407274963595 0.226470474255086 -0.2985602160096806) (curveto 0.309656374255086 -0.34884402584120455 0.42197617425508605 -0.33748020734960626 0.634757234255086 -0.25724484236248213) (curveto 0.9774722042550861 -0.1280260070658748 1.216026564255086 0.03390026706789495 1.2240259642550861 0.14273918170232358) (curveto 1.2287459642550862 0.20700273076812625 1.184881964255086 0.28132959706261473 1.121983764255086 0.3156476039275703) (curveto 1.083730764255086 0.33652340307350437 1.077348764255086 0.3379303583723863 1.015085564255086 0.3392592023444909) (curveto 0.969948864255086 0.34025914149726677 0.9307790642550859 0.33638021483136094 0.892038904255086 0.32724518554936555) (closepath))) #(define (cn-default-note-head-stencil grob) (let ((mag (cn-magnification grob)) (nh-path (if (cn-black-note? grob) cn-note-black-path cn-note-white-path))) (ly:stencil-scale (grob-interpret-markup grob (markup (#:override '(filled . #t) (#:path 0.0001 nh-path)))) mag mag))) #(define (cn-lilypond-note-head-stencil grob) (if (cn-black-note? grob) (ly:font-get-glyph (ly:grob-default-font grob) \"noteheads.s2\") (ly:stencil-scale (ly:font-get-glyph (ly:grob-default-font grob) \"noteheads.s1\") 0.945 1))) #(define (cn-funksol-note-head-stencil grob) (ly:font-get-glyph (ly:grob-default-font grob) (if (cn-black-note? grob) \"noteheads.s2solFunk\" \"noteheads.s1solFunk\"))) #(define (cn-make-note-head-stencil-callback style-fn width-scale height-scale) (lambda (grob) (cond ((cn-stylish-note? grob) (ly:note-head::print grob)) ((cn-whole-note? grob) (cn-whole-note-stencil grob)) (else (let ((stil (style-fn grob))) (if (and (= 1 width-scale) (= 1 height-scale)) stil (ly:stencil-scale stil width-scale height-scale))))))) #(define (cn-make-note-head-rotation-callback rotn) (lambda (grob) (if (or (cn-whole-note? grob) (cn-stylish-note? grob)) #f rotn))) #(define (cn-make-stem-attachment-callback black-attach white-attach) (lambda (grob) (if (or (cn-whole-note? grob) (cn-stylish-note? grob)) (ly:note-head::calc-stem-attachment grob) (if (cn-black-note? grob) black-attach white-attach)))) #(define (cn-recent-enough? bar-number alteration-def laziness) (or (number? alteration-def) (equal? laziness #t) (<= bar-number (+ (cadr alteration-def) laziness)))) #(define (cn-accidental-invalid? alteration-def) (let* ((def (if (pair? alteration-def) (car alteration-def) alteration-def))) (and (symbol? def) def))) #(define (cn-extract-alteration alteration-def) (cond ((number? alteration-def) alteration-def) ((pair? alteration-def) (car alteration-def)) (else 0))) #(define (cn-convert-to-semi-alts cn-alts local-alts) (map (lambda (entry) (let* ((octave (caar entry)) (notename (cdar entry)) (alteration-def (cdr entry)) (alter (if (cn-accidental-invalid? alteration-def) (cn-extract-alteration (assoc-ref cn-alts (cons octave notename))) (cn-extract-alteration alteration-def))) (pitch (ly:make-pitch octave notename alter)) (semitone (ly:pitch-semitones pitch))) (cons semitone alteration-def))) local-alts)) #(define (cn-merge-semi-alts cn-semi-alts local-semi-alts) (define (merge-entry! local-entry) (let* ((semi (car local-entry)) (cn-entry (assv semi cn-semi-alts))) (if (or (not cn-entry) (< (caddr cn-entry) (caddr local-entry)) (and (= (caddr cn-entry) (caddr local-entry)) (ly:moment<? (cdddr cn-entry) (cdddr local-entry)))) (set! cn-semi-alts (assv-set! cn-semi-alts semi (cdr local-entry)))))) (for-each merge-entry! local-semi-alts) cn-semi-alts) #(define (cn-refresh-semi-alts! context) (let* ((local-alts-raw (ly:context-property context (if (ly:version? >= '(2 19 7)) 'localAlterations 'localKeySignature) '())) (accidental-alt? (lambda (entry) (pair? (cdr entry)))) (local-alts (filter accidental-alt? local-alts-raw))) (if (null? local-alts) (begin (ly:context-set-property! context 'cnSemiAlterations '()) (ly:context-set-property! context 'cnAlterations '()) '()) (let* ((cn-alts (ly:context-property context 'cnAlterations '())) (local-semi-alts (cn-convert-to-semi-alts cn-alts local-alts)) (cn-semi-alts (ly:context-property context 'cnSemiAlterations '())) (new-semi-alts (cn-merge-semi-alts cn-semi-alts local-semi-alts))) (ly:context-set-property! context 'cnSemiAlterations new-semi-alts) new-semi-alts)))) #(define (cn-check-pitch-against-signature context pitch barnum measurepos laziness) (let* ((notename (ly:pitch-notename pitch)) (octave (ly:pitch-octave pitch)) (alter (ly:pitch-alteration pitch)) (semi (ly:pitch-semitones pitch)) (cn-semi-alts (cn-refresh-semi-alts! context)) (from-cn-semi-alts (assoc-get semi cn-semi-alts)) (key-alts (ly:context-property context (if (ly:version? >= '(2 19 7)) 'keyAlterations 'keySignature) '())) (from-key-alts (or (assoc-get notename key-alts) (assoc-get (cons octave notename) key-alts))) (previous-alteration (or (and from-cn-semi-alts (cn-recent-enough? barnum from-cn-semi-alts laziness) from-cn-semi-alts) from-key-alts))) (ly:context-set-property! context 'cnAlterations (assoc-set! (ly:context-property context 'cnAlterations) `(,octave . ,notename) `(,alter ,barnum . ,measurepos))) (if (cn-accidental-invalid? previous-alteration) '(#f . #t) (let ((prev-alt (cn-extract-alteration previous-alteration))) (if (= alter prev-alt) '(#f . #f) '(#f . #t)))))) #(define (cn-make-accidental-rule laziness) (lambda (context pitch barnum measurepos) (cn-check-pitch-against-signature context pitch barnum measurepos laziness))) #(if (ly:version? <= '(2 18 2)) (define accidentalStyleClairnoteDefault (set-accidentals-properties #t `(Staff ,(cn-make-accidental-rule 0)) '() 'Staff))) accidental-styles.clairnote-default = #`(#t (Staff ,(cn-make-accidental-rule 0)) ()) accidental-styles.none = #'(#t () ()) #(define cn-acc-sign-stils (let* ((vertical-line (ly:stencil-translate (make-connected-path-stencil '((0 1.0)) 0.2 1 1 #f #f) '(0 . -0.5))) (circle (make-circle-stencil 0.24 0.01 #t)) (diagonal-line (ly:stencil-translate (make-connected-path-stencil '((0.26 0.14)) 0.33 1 1 #f #f) '(-0.13 . -0.07))) (short-vertical-line (ly:stencil-translate (make-connected-path-stencil '((0 0.6)) 0.2 1 1 #f #f) '(0 . -0.3))) (acc-sign (lambda (dot-position) (ly:stencil-add vertical-line (ly:stencil-translate circle `(0 . ,dot-position))))) (double-acc-sign (lambda (stil) (ly:stencil-add (ly:stencil-translate stil '(-0.25 . 0)) (ly:stencil-translate stil '(0.25 . 0))))) (sharp (acc-sign 0.5)) (flat (acc-sign -0.5)) (natural (ly:stencil-add diagonal-line (ly:stencil-translate short-vertical-line '(0.2 . -0.3)) (ly:stencil-translate short-vertical-line '(-0.2 . 0.3))))) `((1/2 . ,sharp) (-1/2 . ,flat) (0 . ,natural) (1 . ,(double-acc-sign sharp)) (-1 . ,(double-acc-sign flat))))) #(define (cn-accidental-grob-callback grob) (let* ((mag (cn-magnification grob)) (alt (accidental-interface::calc-alteration grob)) (stil (assoc-ref cn-acc-sign-stils alt))) (if stil (ly:stencil-scale stil mag mag) (ly:stencil-scale (ly:accidental-interface::print grob) 0.63 0.63)))) #(define (cn-get-keysig-alt-count alt-alist) (if (null? alt-alist) 0 (* (length alt-alist) 2 (cdr (car alt-alist))))) #(define (cn-get-major-tonic alt-count) (if (odd? alt-count) (modulo (- (/ (+ alt-count 1) 2) 4) 7) (modulo (/ alt-count 2) 7))) #(define (cn-make-keysig-posns prev pattern result x-inc) (if (null? pattern) result (let* ((whole-step (eqv? (car pattern) prev)) (y-step (if whole-step 2 1)) (x-step (if whole-step 0 x-inc)) (last-xy (last result)) (new-xy (cons (+ x-step (car last-xy)) (+ y-step (cdr last-xy))))) (cn-make-keysig-posns (car pattern) (cdr pattern) (append result (list new-xy)) x-inc)))) #(define (cn-make-keysig-stack mode alt-list note-space black-tonic tonic-num) (let* ((raw-pattern (take (drop '(#t #t #t #f #f #f #f #t #t #t #f #f #f #f) mode) 7)) (raw-first-item (list-ref raw-pattern 0)) (pattern (if (or (and black-tonic (not raw-first-item)) (and (not black-tonic) raw-first-item)) (map not raw-pattern) raw-pattern)) (first-item (list-ref pattern 0)) (x-inc (if (and (pair? alt-list) (positive? (cdr (car alt-list)))) -0.8 0.8)) (raw-posns (cn-make-keysig-posns (car pattern) (cdr pattern) '((0 . 0)) x-inc)) (posns-b (map (lambda (p) (cons (car p) (* (cdr p) note-space))) raw-posns)) (posns (if (negative? x-inc) (map (lambda (p) (cons (+ 1.2 (car p)) (cdr p))) posns-b) posns-b)) (black-dot (make-oval-stencil 0.34 0.34 0.14 #t)) (white-dot (make-oval-stencil 0.34 0.34 0.15 #f)) (stack-list (map (lambda (xy bw) (ly:stencil-translate (if bw black-dot white-dot) xy)) posns pattern)) (relative-alt-list (map (lambda (n) (cons (modulo (- (car n) tonic-num) 7) (cdr n))) alt-list)) (full-alt-list (map (lambda (n) (assoc-ref relative-alt-list n)) '(0 1 2 3 4 5 6))) (sharp-line (ly:stencil-translate-axis (make-connected-path-stencil '((-0.7 -0.7)) 0.22 1 1 #f #f) -0.2 Y)) (flat-line (ly:stencil-translate-axis (make-connected-path-stencil '((-0.7 0.7)) 0.22 1 1 #f #f) 0.2 Y)) (alt-stack-list (map (lambda (stil alt xy) (cond ((eqv? -1/2 alt) (ly:stencil-combine-at-edge stil X -1 (ly:stencil-translate flat-line xy) -0.2)) ((eqv? 1/2 alt) (ly:stencil-combine-at-edge stil X -1 (ly:stencil-translate sharp-line xy) -0.2)) (else stil))) stack-list full-alt-list posns)) (combined-stack (fold ly:stencil-add empty-stencil alt-stack-list)) (extent (ly:stencil-extent combined-stack 0)) (positioned-stack (ly:stencil-translate-axis combined-stack (- (car extent)) X))) positioned-stack)) #(define (cn-draw-keysig grob) (let* ((base-staff-space (cn-get-base-staff-space grob)) (tonic-pitch (ly:grob-property grob 'cn-tonic)) (tonic-num (ly:pitch-notename tonic-pitch)) (tonic-semi (modulo (ly:pitch-semitones tonic-pitch) 12)) (alt-list (ly:grob-property grob 'alteration-alist)) (alt-count (cn-get-keysig-alt-count alt-list)) (major-tonic-num (cn-get-major-tonic alt-count)) (mode (modulo (- tonic-num major-tonic-num) 7)) (note-space (* 0.5 base-staff-space)) (black-tonic (eqv? 0 (modulo tonic-semi 2))) (raw-stack (cn-make-keysig-stack mode alt-list note-space black-tonic tonic-num)) (base-vert-adj (if (= 0 tonic-semi) tonic-semi (- tonic-semi 12))) (staff-clef-adjust (cn-staff-clef-adjust-from-grob grob)) (vert-adj (* note-space (+ base-vert-adj staff-clef-adjust))) (stack (ly:stencil-translate-axis raw-stack vert-adj Y))) stack)) #(define (cn-key-signature-grob-callback grob) (if (grob::has-interface grob 'key-cancellation-interface) #f (let ((stil (cn-draw-keysig grob)) (mag (cn-magnification grob))) (ly:stencil-scale stil mag mag)))) #(define (Cn_key_signature_engraver context) (make-engraver (acknowledgers ((key-signature-interface engraver grob source-engraver) (ly:grob-set-property! grob 'cn-tonic (ly:context-property context 'tonic)))))) #(define (cn-convert-clef-glyph glyph pos) (if (null? glyph) '() (or (cond ((string=? \"clefs.G\" glyph) (if (member pos '(-2 -4)) \"clefs.G\" #f)) ((string=? \"clefs.F\" glyph) (if (member pos '(2 0 4)) \"clefs.F\" #f)) ((string=? \"clefs.C\" glyph) (cond ((member pos '(0 2 -2)) \"clefs.C\") ((= -4 pos) \"clefs.G\") ((= 4 pos) \"clefs.F\") (else #f))) ((string=? \"clefs.percussion\" glyph) \"clefs.percussion\") (else #f)) (begin (ly:warning \"clef unsupported by clairnote.ly, using another clef instead.\") (cond ((string=? \"clefs.F\" glyph) \"clefs.F\") ((string=? \"clefs.C\" glyph) \"clefs.C\") (else \"clefs.G\")))))) #(define (cn-convert-clef-transposition trans) (cond ((null? trans) '()) ((= 0 (modulo trans 12)) trans) (else (* 12 (round (/ trans 7)))))) #(define (cn-convert-clef-position glyph clef-adjust) (if (null? glyph) '() (+ clef-adjust (cond ((string=? \"clefs.G\" glyph) -5) ((string=? \"clefs.F\" glyph) 5) (else 0))))) #(define (cn-convert-middle-c-clef-position glyph clef-adjust trans) (if (null? glyph) '() (+ clef-adjust (- trans) (cond ((string=? \"clefs.G\" glyph) -12) ((string=? \"clefs.F\" glyph) 12) (else 0))))) #(define (cn-convert-middle-c-offset offset) (if (null? offset) '() (* offset 12/7))) #(define (Cn_clef_ottava_engraver context) (let* ((props (alist->hash-table '((clefGlyph . ()) (clefPosition . ()) (middleCClefPosition . ()) (clefTransposition . ()) (cueClefGlyph . ()) (cueClefPosition . ()) (middleCCuePosition . ()) (cueClefTransposition . ()) (middleCOffset . ()) (cnStaffOctaves . ()) (cnClefShift . ())))) (set-prop! (lambda (kee val) (hash-set! props kee val) (ly:context-set-property! context kee val))) (set-glyph! (lambda (glyph pos) (set-prop! glyph (cn-convert-clef-glyph (ly:context-property context glyph) (ly:context-property context pos))))) (set-transposition! (lambda (trans) (set-prop! trans (cn-convert-clef-transposition (ly:context-property context trans))))) (set-position! (lambda (pos glyph clef-adjust) (set-prop! pos (cn-convert-clef-position (hash-ref props glyph '()) clef-adjust)))) (set-middle-c! (lambda (midc glyph clef-adjust trans) (set-prop! midc (cn-convert-middle-c-clef-position (hash-ref props glyph '()) clef-adjust (hash-ref props trans '()))))) (changed? (lambda (prop equality-predicate) (not (equality-predicate (hash-ref props prop) (ly:context-property context prop)))))) (make-engraver (listeners ((rhythmic-event engraver event) (let* ((new-staff-octaves (changed? 'cnStaffOctaves eqv?)) (new-clef-shift (changed? 'cnClefShift eqv?)) (new-mid-c-offset (changed? 'middleCOffset eqv?)) (new-clef (or (changed? 'clefPosition eqv?) (changed? 'middleCClefPosition eqv?) (changed? 'clefTransposition eqv?) (changed? 'clefGlyph equal?))) (new-cue (or (changed? 'cueClefPosition eqv?) (changed? 'middleCCuePosition eqv?) (changed? 'cueClefTransposition eqv?) (changed? 'cueClefGlyph equal?)))) (if (or new-clef new-cue new-staff-octaves new-clef-shift new-mid-c-offset) (let ((clef-adjust (cn-get-staff-clef-adjust (ly:context-property context 'cnStaffOctaves) (ly:context-property context 'cnClefShift)))) (if new-staff-octaves (hash-set! props 'cnStaffOctaves (ly:context-property context 'cnStaffOctaves))) (if new-clef-shift (hash-set! props 'cnClefShift (ly:context-property context 'cnClefShift))) (if new-clef (set-glyph! 'clefGlyph 'clefPosition)) (if new-cue (set-glyph! 'cueClefGlyph 'cueClefPosition)) (if (or new-clef new-staff-octaves new-clef-shift) (begin (set-transposition! 'clefTransposition) (set-position! 'clefPosition 'clefGlyph clef-adjust) (set-middle-c! 'middleCClefPosition 'clefGlyph clef-adjust 'clefTransposition))) (if (or new-cue new-staff-octaves new-clef-shift) (begin (set-transposition! 'cueClefTransposition) (set-position! 'cueClefPosition 'cueClefGlyph clef-adjust) (set-middle-c! 'middleCCuePosition 'cueClefGlyph clef-adjust 'cueClefTransposition))) (if new-mid-c-offset (set-prop! 'middleCOffset (cn-convert-middle-c-offset (ly:context-property context 'middleCOffset)))) (ly:set-middle-C! context) ))))) (acknowledgers ((clef-interface engraver grob source-engraver) (ly:grob-set-property! grob 'cn-clef-transposition (ly:context-property context 'clefTransposition)))) ))) #(define cn-clef-curves '((\"clefs.G\" . ((moveto 1.5506 4.76844) (curveto 1.5376 4.76844 1.5066 4.75114 1.5136 4.73384) (lineto 1.7544 4.17292) (curveto 1.8234 3.97367 1.8444 3.88334 1.8444 3.66416) (curveto 1.8444 3.16204 1.5635 2.76967 1.2174 2.38312) (lineto 1.0789 2.2278) (curveto 0.5727 1.68982 0 1.16441 0 0.45906) (curveto 0 -0.36713 0.6414 -1.05 1.4549 -1.05) (curveto 1.5319 -1.05 1.6984 -1.0492 1.8799 -1.0372) (curveto 2.0139 -1.0282 2.1594 -0.9969 2.2732 -0.9744) (curveto 2.3771 -0.9538 2.5752 -0.8757 2.5752 -0.8757) (curveto 2.7512 -0.8152 2.6612 -0.62915 2.5442 -0.6835) (curveto 2.5442 -0.6835 2.3481 -0.7626 2.2449 -0.7822) (curveto 2.1355 -0.803 1.9939 -0.8319 1.8645 -0.8382) (curveto 1.6935 -0.8462 1.5257 -0.8402 1.4569 -0.8352) (curveto 1.1541 -0.8139 0.8667 -0.67432 0.6558 -0.48763) (curveto 0.5148 -0.36284 0.3782 -0.17408 0.3582 0.12709) (curveto 0.3582 0.76471 0.792 1.23147 1.255 1.71365) (lineto 1.3978 1.86523) (curveto 1.8046 2.29959 2.185 2.75829 2.185 3.32815) (curveto 2.185 3.77846 1.9185 4.42204 1.6113 4.75678) (curveto 1.5983 4.76858 1.5713 4.77188 1.5513 4.76828) (closepath))) (\"clefs.F\" . ((moveto 0.2656 0.78107) (curveto 0.3775 0.79547 0.4351 0.84567 0.7003 0.85587) (curveto 0.9459 0.86587 1.0531 0.85987 1.1805 0.83797) (curveto 1.6967 0.74937 2.1173 0.13032 2.1173 -0.64059) (curveto 2.1173 -2.10531 0.9987 -3.04975 0.019 -3.8078) (curveto 0 -3.8345 0 -3.846 0 -3.8652) (curveto 0 -3.9101 0.022 -3.94 0.056 -3.94) (curveto 0.071 -3.94 0.079 -3.93904 0.107 -3.9231) (curveto 1.3341 -3.23572 2.6095 -2.2656 2.6095 -0.57604) (curveto 2.6095 0.4711 2.0006 1.05061 1.1664 1.05061) (curveto 0.9058 1.05561 0.7658 1.05861 0.5568 1.02591) (curveto 0.4588 1.01061 0.248 0.97281 0.219 0.92831) (curveto 0.165 0.89151 0.162 0.77308 0.266 0.78129) (closepath))) (\"clefs.C\" . ((moveto 1.0406 2.93878) (curveto 0.9606 2.93578 0.8881 2.93178 0.8237 2.92878) (lineto 0.8237 2.92846) (curveto 0.6586 2.92046 0.4659 2.89806 0.3697 2.87906) (curveto 0.1409 2.83386 0.0236 2.78916 0 2.75937) (curveto -0.018 2.73927 -0.015 2.71087 0 2.69037) (curveto 0.023 2.64587 0.145 2.67017 0.4188 2.72887) (curveto 0.5108 2.74867 0.6924 2.76597 0.8607 2.77257) (curveto 1.0868 2.78157 1.2883 2.70417 1.3194 2.69167) (curveto 1.7053 2.53668 2.0444 2.24033 2.0444 1.46855) (curveto 2.0444 0.8488 1.8942 0.04261 1.4629 0.04261) (curveto 1.4489 0.04061 1.4419 0.03861 1.4289 0.02891) (curveto 1.4149 0.01311 1.4179 0.00091 1.4169 -0.01179) (curveto 1.4169 -0.01193 1.4169 -0.01195 1.4169 -0.01211) (curveto 1.4169 -0.01225 1.4169 -0.01227 1.4169 -0.01243) (curveto 1.4169 -0.02513 1.4169 -0.03723 1.4289 -0.05313) (curveto 1.4389 -0.06213 1.4479 -0.06493 1.4629 -0.06683) (curveto 1.8942 -0.06683 2.0444 -0.87302 2.0444 -1.49278) (curveto 2.0444 -2.26455 1.7053 -2.56059 1.3194 -2.71559) (curveto 1.2884 -2.72799 1.0868 -2.80579 0.8607 -2.79679) (curveto 0.6924 -2.78979 0.5113 -2.77259 0.4188 -2.75279) (curveto 0.145 -2.69409 0.0231 -2.66979 0 -2.71429) (curveto -0.011 -2.73479 -0.014 -2.76349 0 -2.78359) (curveto 0.024 -2.81339 0.1409 -2.85799 0.3697 -2.90328) (curveto 0.4657 -2.92228 0.6586 -2.94468 0.8237 -2.95268) (lineto 0.8237 -2.953) (curveto 0.9525 -2.958 1.1126 -2.9714 1.305 -2.96) (curveto 1.9479 -2.916 2.5587 -2.47655 2.5587 -1.48844) (curveto 2.5587 -0.89409 2.1807 -0.20184 1.7065 -0.01218) (curveto 2.1807 0.17748 2.5587 0.86972 2.5587 1.46406) (curveto 2.5587 2.45218 1.9479 2.89194 1.305 2.93594) (curveto 1.209 2.94194 1.1207 2.94094 1.0406 2.93794) (closepath))) )) #(define (cn-number-stencil grob number) (ly:stencil-aligned-to (ly:font-get-glyph (ly:grob-default-font grob) (list-ref '(\"zero\" \"one\" \"two\" \"three\" \"four\" \"five\" \"six\" \"seven\" \"eight\" \"nine\") number)) X 0)) #(define (cn-clef-number-shift glyph octave) (cond ((string=? \"clefs.G\" glyph) (case octave ((4) '(1.5 . -0.63)) ((6) '(1.6 . -0.63)) (else '(1.7 . -0.63)))) ((string=? \"clefs.F\" glyph) '(1.0 . -1.33)) ((string=? \"clefs.C\" glyph) '(0.9 . 0.48)) (else '(0 . 0)))) #(define (cn-clef-stencil-callback grob) (let* ((glyph (ly:grob-property grob 'glyph)) (curve-path (assoc-ref cn-clef-curves glyph))) (if curve-path (let* ((curve-stil (grob-interpret-markup grob (markup (#:override '(filled . #t) (#:path 0.0001 curve-path))))) (mag (cn-magnification grob)) (scaled-curve (ly:stencil-scale curve-stil mag mag)) (transpo (ly:grob-property grob 'cn-clef-transposition)) (default-octave (if (string=? \"clefs.F\" glyph) 3 4)) (octave (+ default-octave (/ transpo 12))) (number-shift (map-pairs * (cons mag mag) (cn-clef-number-shift glyph octave))) (scale 0.9) (number-stil (ly:stencil-translate (ly:stencil-scale (cn-number-stencil grob octave) scale scale) number-shift)) (2nd-number-stil (if (string=? \"clefs.C\" glyph) (ly:stencil-translate (ly:stencil-scale (cn-number-stencil grob (1- octave)) scale scale) (cons (* mag 0.9) (* mag -2.46))) empty-stencil)) (combined-stil (ly:stencil-add scaled-curve number-stil 2nd-number-stil)) (glyph-name (ly:grob-property grob 'glyph-name))) (if (member glyph-name '(\"clefs.G_change\" \"clefs.F_change\" \"clefs.C_change\")) (ly:stencil-scale combined-stil 0.8 0.8) combined-stil)) (ly:clef::print grob)))) #(add-bar-glyph-print-procedure \":\" (lambda (grob extent) (let* ((staff-sym (ly:grob-object grob 'staff-symbol)) (is-clairnote-staff (if (ly:grob? staff-sym) (ly:grob-property staff-sym 'cn-is-clairnote-staff) #t)) (odd-octaves (if (ly:grob? staff-sym) (member -2 (ly:grob-property staff-sym 'line-positions)) #f)) (dot-positions (if is-clairnote-staff (if odd-octaves '(4 8) '(-2 2)) '(-1 1))) (staff-space (ly:staff-symbol-staff-space grob)) (dot (ly:font-get-glyph (ly:grob-default-font grob) \"dots.dot\"))) (fold (lambda (dp prev) (ly:stencil-add prev (ly:stencil-translate-axis dot (* dp (/ staff-space 2)) Y))) empty-stencil dot-positions)))) #(define (cn-time-signature-grob-callback grob) (let* ((base-staff-space (cn-get-base-staff-space grob)) (vscale-staff (* 12/7 base-staff-space)) (base-y-offset (* (+ vscale-staff -0.9) -2.5)) (note-space (* 0.5 base-staff-space)) (staff-clef-adjust (cn-staff-clef-adjust-from-grob grob)) (y-offset (+ base-y-offset (* note-space staff-clef-adjust))) (mag (cn-magnification grob)) (final-y-offset (* y-offset mag))) (ly:grob-set-property! grob 'Y-offset final-y-offset))) #(define (cn-grob-edge grob positive) (let* ((offset (ly:grob-property grob 'Y-offset)) (extent (ly:grob-property grob 'Y-extent)) (extent-dir (if positive (cdr extent) (car extent)))) (+ offset extent-dir))) #(define (cn-grobs-edge grobs positive) (let* ((comparator (if positive > <)) (final-edge (fold (lambda (g prev-edge) (let ((this-edge (cn-grob-edge g positive))) (if (comparator this-edge prev-edge) this-edge prev-edge))) (cn-grob-edge (car grobs) positive) (cdr grobs)))) final-edge)) #(define (cn-double-stem grob) (let* ((stem-stil (ly:stem::print grob)) (dir (ly:grob-property grob 'direction)) (up-stem (= 1 dir)) (stem-x-extent (ly:grob-property grob 'X-extent)) (stem-width (abs (- (car stem-x-extent) (cdr stem-x-extent)))) (width-scale (ly:grob-property grob 'cn-double-stem-width-scale 1.5)) (stem2-width (* stem-width width-scale)) (width-shift (/ (abs (- stem-width stem2-width)) 2)) (spacing-scale (ly:grob-property grob 'cn-double-stem-spacing 3.5)) (spacing-shift (* dir spacing-scale stem-width)) (stem-left-edge (car stem-x-extent)) (stem-right-edge (cdr stem-x-extent)) (stem2-left-edge (+ spacing-shift stem-left-edge (* -1 width-shift))) (stem2-right-edge (+ spacing-shift stem-right-edge width-shift)) (stem2-x-extent (cons stem2-left-edge stem2-right-edge)) (stem-y-extent (ly:grob-property grob 'Y-extent)) (note-heads (cn-note-heads-from-grob grob '())) (heads-edge (cn-grobs-edge note-heads up-stem)) (stem-tip (if up-stem (cdr stem-y-extent) (car stem-y-extent))) (stem2-y-extent (if up-stem (cons heads-edge stem-tip) (cons stem-tip heads-edge))) (blot (ly:output-def-lookup (ly:grob-layout grob) 'blot-diameter)) (stem2-stil (ly:round-filled-box stem2-x-extent stem2-y-extent blot))) (ly:grob-set-property! grob 'stencil (ly:stencil-add stem-stil stem2-stil)) (ly:grob-set-property! grob 'X-extent (ly:stencil-extent (ly:grob-property grob 'stencil) 0)) )) #(define (cn-multiply-details details multiplier skip-list) (define multiply-by (lambda (x) (* x multiplier))) (map (lambda (dt) (let ((head (car dt)) (vals (cdr dt))) (cons head (if (memq head skip-list) vals (map multiply-by vals))))) details)) #(define (cn-customize-stem grob) (let* ((bss-inverse (/ 1 (cn-get-base-staff-space grob))) (deets (ly:grob-property grob 'details)) (deets2 (cn-multiply-details deets bss-inverse '(stem-shorten)))) (ly:grob-set-property! grob 'details deets2) (if (= 1 (ly:grob-property grob 'duration-log)) (cn-double-stem grob) ))) #(define (cn-stem-grob-callback grob) (if (and (ly:grob-property-data grob 'stencil) (not (null? (ly:grob-object grob 'note-heads)))) (cn-customize-stem grob) )) #(define (cn-make-stem-spans! ctx stems trans) (define (close-enough? x y) (< (abs (- x y)) 0.0001)) (define (extent-combine extents) (if (pair? (cdr extents)) (interval-union (car extents) (extent-combine (cdr extents))) (car extents))) (define ((stem-connectable? ref root) stem) (or (eq? root stem) (and (close-enough? (car (ly:grob-extent root ref X)) (car (ly:grob-extent stem ref X))) (positive? (* (ly:grob-property root 'direction) (- (car (ly:grob-extent stem ref Y)) (car (ly:grob-extent root ref Y)))))))) (define (stem-span-stencil span) (let* ((system (ly:grob-system span)) (root (ly:grob-parent span X)) (stems (filter (stem-connectable? system root) (ly:grob-object span 'stems)))) (if (<= 2 (length stems)) (let* ((yextents (map (lambda (st) (ly:grob-extent st system Y)) stems)) (yextent (extent-combine yextents)) (layout (ly:grob-layout root)) (blot (ly:output-def-lookup layout 'blot-diameter)) (note-head (list-ref (cn-note-heads-from-grob root '()) 0))) (if (and note-head (= 1 (ly:grob-property note-head 'duration-log))) (ly:round-filled-box '(-0.065 . 0.065) yextent blot) (begin (for-each (lambda (st) (set! (ly:grob-property st 'stencil) #f)) stems) (ly:round-filled-box (ly:grob-extent root root X) yextent blot)))) #f))) (define ((make-stem-span! stems trans) root) (let ((span (ly:engraver-make-grob trans 'Stem '()))) (ly:grob-set-parent! span X root) (set! (ly:grob-object span 'stems) stems) (set! (ly:grob-property span 'X-offset) 0) (set! (ly:grob-property span 'stencil) stem-span-stencil))) (define (stem-is-root? stem) (eq? cross-staff-connect (ly:grob-property-data stem 'cross-staff))) (if (<= 2 (length stems)) (let ((roots (filter stem-is-root? stems))) (for-each (make-stem-span! stems trans) roots)))) #(define (Span_stem_engraver ctx) (let ((stems '())) (make-engraver (acknowledgers ((stem-interface trans grob source) (set! stems (cons grob stems)))) ((process-acknowledged trans) (cn-make-stem-spans! ctx stems trans) (set! stems '()))))) #(define (cn-highest-semitone note-heads) (reduce max -inf.0 (map cn-notehead-semitone note-heads))) #(define (cn-dots-callback dots-grob) (let* ((parent (ly:grob-parent dots-grob Y)) (note-head (and (not (grob::has-interface parent 'rest-interface)) parent)) (semi '()) (stem '())) (and note-head (= 1 (ly:grob-property note-head 'duration-log)) (begin (set! semi (cn-notehead-semitone note-head)) (= 0 (modulo semi 4))) (begin (set! stem (ly:grob-object (ly:grob-parent note-head X) 'stem)) stem) (not (null? stem)) (= 1 (ly:grob-property stem 'direction)) (let* ((note-heads (cn-note-heads-from-grob stem '()))) (or (= 1 (length note-heads)) (= semi (cn-highest-semitone note-heads)))) (let* ((stem-extent (ly:grob-property stem 'X-extent)) (stem-width (- (cdr stem-extent) (car stem-extent))) (x-offset (* 0.75 stem-width))) (cons x-offset 0)) ))) #(define (cn-beam-grob-callback grob) (let* ((bss-inverse (/ 1 (cn-get-base-staff-space grob))) (thick (ly:grob-property grob 'beam-thickness)) (len-frac (ly:grob-property grob 'length-fraction)) (space (if (number? len-frac) len-frac 1))) (ly:grob-set-property! grob 'length-fraction (* space 1.1 bss-inverse)) (ly:grob-set-property! grob 'beam-thickness (* thick bss-inverse)) )) #(define cn-ledgers-gradual '(2 2 2 5)) #(define cn-ledgers-less-gradual '(2 2 5 2)) #(define (cn-ledger-pattern dist staff-symbol) (let* ((recipe (ly:grob-property staff-symbol 'cn-ledger-recipe cn-ledgers-gradual)) (extra-4 (list-ref recipe 0)) (extra-8 (list-ref recipe 1)) (extra-12 (list-ref recipe 2)) (hide-4 (list-ref recipe 3)) (rem (remainder dist 12)) (base (* 12 (quotient dist 12))) (lrs (reverse (merge (iota (quotient base 12) 12 12) (iota (quotient (+ 4 base) 12) 8 12) <))) (get-ledger (lambda (pos extra rem base) (if (<= (- pos extra) rem) (list (+ pos base)) '()))) (lr12 (get-ledger 12 extra-12 rem base)) (lr8 (get-ledger 8 extra-8 rem base)) (lr4 (if (<= rem (+ 4 hide-4)) (get-ledger 4 extra-4 rem base) '())) (result (append lr12 lr8 lr4 lrs))) result)) #(define cn-ledger-positions '(lambda (staff-symbol pos) (let* ((lines (ly:grob-property staff-symbol 'line-positions '(-8 -4 4 8))) (nearest-line (fold (lambda (line prev) (if (< (abs (- line pos)) (abs (- prev pos))) line prev)) (car lines) (cdr lines))) (diff (- pos nearest-line)) (dist (abs diff)) (dir (if (negative? diff) -1 1)) (ledgers0 (cn-ledger-pattern dist staff-symbol)) (ledgers1 (map (lambda (n) (+ nearest-line (* dir n))) ledgers0)) (ledgers2 (filter (lambda (n) (not (member n lines))) ledgers1))) ledgers2))) #(define (cn-get-new-staff-positions posns base-positions going-up going-down) (define recurser (lambda (proc posns extension n) (if (<= n 0) posns (recurser proc (proc posns extension) extension (- n 1))))) (define (extend-up posns extension) (let ((furthest (reduce max '() posns))) (append posns (map (lambda (ext) (+ furthest ext)) extension)))) (define (extend-down posns extension) (let ((furthest (reduce min '() posns))) (append (map (lambda (ext) (- furthest ext)) extension) posns))) (let* ((max-bp (reduce max '() base-positions)) (min-bp (reduce min '() base-positions)) (gap (+ min-bp (- 12 max-bp))) (extension (map (lambda (bp) (+ bp gap (- min-bp))) base-positions)) (extension-length (length extension)) (posns-up (cond ((positive? going-up) (recurser extend-up posns extension going-up)) ((negative? going-up) (if (> (length posns) extension-length) (drop-right (sort posns <) extension-length) (begin (ly:warning \"\\\\cnUnextendStaffUp failed, not enough staff to unextend\") posns))) (else posns))) (posns-down (cond ((positive? going-down) (recurser extend-down posns-up extension going-down)) ((negative? going-down) (if (> (length posns) extension-length) (drop (sort posns <) extension-length) (begin (ly:warning \"\\\\cnUnextendStaffDown failed, not enough staff to unextend\") posns))) (else posns-up)))) posns-down)) #(define cnStaffExtender (define-music-function (parser location reset going-up going-down) (boolean? integer? integer?) #{ \\context Staff \\applyContext #(lambda (context) (if (not (eqv? 'TradStaff (ly:context-name context))) (let* ((grob-def (ly:context-grob-definition context 'StaffSymbol)) (current-lines (ly:assoc-get 'line-positions grob-def '(-8 -4 4 8))) (base-lines (ly:context-property context 'cnBaseStaffLines)) (posns (if reset base-lines current-lines)) (new-posns (cn-get-new-staff-positions posns base-lines going-up going-down))) (ly:context-pushpop-property context 'StaffSymbol 'line-positions new-posns)))) \\stopStaff \\startStaff #})) #(define cnExtendStaffUp #{ \\cnStaffExtender ##f 1 0 #}) #(define cnExtendStaffDown #{ \\cnStaffExtender ##f 0 1 #}) #(define cnUnextendStaffUp #{ \\cnStaffExtender ##f -1 0 #}) #(define cnUnextendStaffDown #{ \\cnStaffExtender ##f 0 -1 #}) #(define cnStaffOctaveSpan (define-music-function (parser location octaves) (positive-integer?) (let* ((odd-octs (odd? octaves)) (base-lines (if odd-octs '(-2 2) '(-8 -4))) (n (/ (1- octaves) 2)) (upwards (if odd-octs n (ceiling n))) (downwards (if odd-octs n (floor n)))) #{ \\set Staff.cnStaffOctaves = #octaves \\override Staff.StaffSymbol.cn-staff-octaves = #octaves \\set Staff.cnBaseStaffLines = #base-lines \\override Staff.StaffSymbol.ledger-positions = #base-lines \\cnStaffExtender ##t #upwards #downwards #}))) #(define cnClefPositionShift (define-music-function (parser location octaves) (integer?) #{ \\set Staff.cnClefShift = #octaves \\override Staff.StaffSymbol.cn-clef-shift = #octaves \\stopStaff \\startStaff #})) #(define cnFiveLineStaff #{ \\cnStaffOctaveSpan 2 \\override Staff.StaffSymbol.line-positions = #'(-8 -4 0 4 8) #}) #(define cnFourLineStaff #{ \\cnStaffOctaveSpan 2 \\override Staff.StaffSymbol.line-positions = #'(-8 -4 0 4) #}) #(define cnStaffCompression (define-music-function (parser location ss) (number?) (let* ((trad-octave (/ (round (* 10000 (exact->inexact (* 12/7 ss)))) 10000)) (notehead-overlap (+ 0.5 (- 0.5 (/ ss 2))))) (ly:message \"Clairnote: custom staff compression of ~a will produce octaves ~a times the size of octaves in traditional notation; adjacent note heads (a semitone apart) will overlap by about ~a of their height.\" ss trad-octave notehead-overlap) #{ \\override Staff.StaffSymbol.cn-base-staff-space = #ss \\override Staff.StaffSymbol.staff-space = #ss #}))) #(define cnNoteheadStyle (define-music-function (parser location style) (string?) (cond ((string=? \"funksol\" style) #{ \\override Staff.NoteHead.stencil = #(cn-make-note-head-stencil-callback cn-funksol-note-head-stencil 1.35 1) \\override Staff.NoteHead.stem-attachment = #(cn-make-stem-attachment-callback '(1 . 0.2) '(1 . 0.2)) \\override Staff.NoteHead.rotation = ##f #}) ((string=? \"lilypond\" style) #{ \\override Staff.NoteHead.stencil = #(cn-make-note-head-stencil-callback cn-lilypond-note-head-stencil 1 1) \\override Staff.NoteHead.stem-attachment = #(cn-make-stem-attachment-callback '(1.04 . 0.3) '(1.06 . 0.3)) \\override Staff.NoteHead.rotation = #(cn-make-note-head-rotation-callback '(-9 0 0)) #}) (else (if (not (string=? \"default\" style)) (ly:warning \"unrecognized style ~s used with \\\\cnNoteheadStyle, using default instead.\" style)) #{ \\override Staff.NoteHead.stencil = #(cn-make-note-head-stencil-callback cn-default-note-head-stencil 1 1) \\override Staff.NoteHead.stem-attachment = #ly:note-head::calc-stem-attachment \\override Staff.NoteHead.rotation = ##f #}) ))) #(let* ((context-prop (lambda (symbol type?) (set-object-property! symbol 'translation-type? type?) (set-object-property! symbol 'translation-doc \"custom context property\") (set! all-translation-properties (cons symbol all-translation-properties)) symbol)) (grob-prop (lambda (symbol type?) (set-object-property! symbol 'backend-type? type?) (set-object-property! symbol 'backend-doc \"custom grob property\") symbol))) (context-prop 'cnSemiAlterations list?) (context-prop 'cnAlterations list?) (context-prop 'cnBaseStaffLines list?) (context-prop 'cnStaffOctaves positive-integer?) (grob-prop 'cn-staff-octaves positive-integer?) (context-prop 'cnClefShift integer?) (grob-prop 'cn-clef-shift integer?) (grob-prop 'cn-clef-transposition integer?) (grob-prop 'cn-base-staff-space positive?) (grob-prop 'cn-is-clairnote-staff boolean?) (grob-prop 'cn-tonic ly:pitch?) (grob-prop 'cn-double-stem-spacing number?) (grob-prop 'cn-double-stem-width-scale non-zero?) (grob-prop 'cn-ledger-recipe number-list?)) #(if (ly:version? <= '(2 19 0)) (define (cn-set-acc-extents grob) (ly:grob-set-property! grob 'Y-extent '(-0.5 . 1.2)) (ly:grob-set-property! grob 'X-extent (case (accidental-interface::calc-alteration grob) ((-1/2) '(0 . 0.54)) ((1/2) '(-0.27 . 0.27)) ((-1) '(-0.34 . 0.67)) ((1) '(-0.54 . 0.47)) ((0) '(-0.0 . 0.44)))))) #(if (ly:version? < '(2 19 18)) (define (cn-dots-grob-callback grob) (let* ((parent (ly:grob-parent grob Y)) (semi (if (grob::has-interface parent 'rest-interface) #f (modulo (cn-notehead-semitone parent) 12)))) (cond ((eqv? 0 semi) (ly:grob-set-property! grob 'staff-position (if (eqv? -1 (ly:grob-property grob 'direction)) -1 1))) ((member semi '(2 6 10)) (ly:grob-set-property! grob 'Y-offset -0.36)) )))) #(if (ly:version? < '(2 19 34)) (begin (define (cn-shift-notehead nh nh-dir stem-dir) (let* ((dur-log (ly:grob-property nh 'duration-log)) (stil (ly:grob-property nh 'stencil)) (stil-x-length (interval-length (ly:stencil-extent stil X))) (stem (ly:grob-object nh 'stem)) (stem-thick (ly:grob-property stem 'thickness 1.3)) (stem-x-width (/ stem-thick 10)) (stem-x-corr (cond ((= 0 dur-log) 0.223) ((and (< dur-log 0) (= 1 stem-dir)) (* -1 (+ 2 (* -1 stem-x-width)))) ((< dur-log 0) (* 2 stem-x-width)) (else (/ stem-x-width 2))))) (ly:grob-translate-axis! nh (* nh-dir (- stil-x-length stem-x-corr)) X))) (define (cn-chords-loop note-heads first-semi stem-dir note-col) (define (loop nhs last-semi parity) (if (> (length nhs) 0) (let* ((nh (car nhs)) (semi (cn-notehead-semitone nh)) (interval (abs (- semi last-semi)))) (if (> interval 2) (loop (cdr nhs) semi #t) (let* ((nh-dir (if parity stem-dir (* -1 stem-dir))) (pos (round (ly:grob-relative-coordinate nh note-col X))) (old-nh-dir (if (> stem-dir 0) (if (= 0 pos) -1 1) (if (= 0 pos) 1 -1)))) (if (not (= nh-dir old-nh-dir)) (cn-shift-notehead nh nh-dir stem-dir)) (loop (cdr nhs) semi (not parity))))))) (loop note-heads first-semi #t)) (define (cn-note-column-callback grob) (let* ((nhs-raw (cn-note-heads-from-grob grob '(0)))) (if (> (length nhs-raw) 1) (let* ((nhs-sorted (sort-list nhs-raw (lambda (a b) (< (cn-notehead-semitone a) (cn-notehead-semitone b))))) (stem-dir (ly:grob-property (ly:grob-object grob 'stem) 'direction)) (nhs-cooked (if (< stem-dir 0) (reverse nhs-sorted) nhs-sorted)) (first-semi (cn-notehead-semitone (car nhs-cooked)))) (cn-chords-loop (cdr nhs-cooked) first-semi stem-dir grob))))) )) \\layout { \\context { \\Staff \\name TradStaff \\alias Staff \\override StaffSymbol.cn-is-clairnote-staff = ##f } \\context { \\ChoirStaff \\accepts TradStaff } \\context { \\GrandStaff \\accepts TradStaff } \\context { \\PianoStaff \\accepts TradStaff } \\context { \\StaffGroup \\accepts TradStaff } \\context { \\Score \\accepts TradStaff \\override SystemStartBar.collapse-height = #9 } \\context { \\Staff clefGlyph = \"clefs.G\" clefPosition = -2 middleCClefPosition = -6 clefTransposition = 0 middleCPosition = -12 staffLineLayoutFunction = #ly:pitch-semitones printKeyCancellation = ##f \\numericTimeSignature cnBaseStaffLines = #'(-8 -4) cnStaffOctaves = #2 cnClefShift = #0 #(if (ly:version? > '(2 18 2)) #{ \\accidentalStyle clairnote-default #} #{ \\accidentalStyleClairnoteDefault #}) \\override StaffSymbol.cn-staff-octaves = #2 \\override StaffSymbol.cn-clef-shift = #0 \\override StaffSymbol.line-positions = #'(-8 -4 4 8) \\override StaffSymbol.ledger-positions = #'(-8 -4 0 4 8) \\override StaffSymbol.staff-space = #0.75 \\override StaffSymbol.cn-base-staff-space = #0.75 \\override NoteHead.stencil = #(cn-make-note-head-stencil-callback cn-default-note-head-stencil 1 1) \\override AmbitusNoteHead.stencil = #(cn-make-note-head-stencil-callback cn-default-note-head-stencil 1 1) \\override TrillPitchGroup.stencil = #(cn-make-note-head-stencil-callback cn-default-note-head-stencil 1 1) \\override Stem.no-stem-extend = ##t \\override Stem.cn-double-stem-spacing = #3.5 \\override Stem.cn-double-stem-width-scale = #1.5 \\override Stem.before-line-breaking = #cn-stem-grob-callback \\override Beam.before-line-breaking = #cn-beam-grob-callback \\override Accidental.horizontal-skylines = #'() \\override Accidental.vertical-skylines = #'() \\override Accidental.stencil = #cn-accidental-grob-callback \\override AccidentalCautionary.stencil = #cn-accidental-grob-callback \\override AccidentalSuggestion.stencil = #cn-accidental-grob-callback \\override AmbitusAccidental.stencil = #cn-accidental-grob-callback \\override TrillPitchAccidental.stencil = #cn-accidental-grob-callback \\override KeySignature.horizontal-skylines = #'() \\override KeySignature.stencil = #cn-key-signature-grob-callback \\override KeyCancellation.horizontal-skylines = #'() \\override KeyCancellation.stencil =#cn-key-signature-grob-callback \\override TimeSignature.before-line-breaking = #cn-time-signature-grob-callback \\override LedgerLineSpanner.length-fraction = 0.45 \\override LedgerLineSpanner.minimum-length-fraction = 0.35 \\override Clef.stencil = #cn-clef-stencil-callback \\override CueClef.stencil = #cn-clef-stencil-callback \\override CueEndClef.stencil = #cn-clef-stencil-callback \\override ClefModifier.stencil = ##f \\override Dots.extra-offset = #cn-dots-callback #(if (ly:version? <= '(2 19 0)) #{ \\override Accidental.before-line-breaking = #cn-set-acc-extents \\override AccidentalCautionary.before-line-breaking = #cn-set-acc-extents \\override AccidentalSuggestion.before-line-breaking = #cn-set-acc-extents \\override AmbitusAccidental.before-line-breaking = #cn-set-acc-extents \\override TrillPitchAccidental.before-line-breaking = #cn-set-acc-extents #} #{ #}) #(if (ly:version? >= '(2 19 34)) #{ \\override Stem.note-collision-threshold = 2 \\override NoteCollision.note-collision-threshold = 2 #} #{ \\override NoteColumn.before-line-breaking = #cn-note-column-callback #}) \\override StaffSymbol.ledger-extra = #(if (ly:version? >= '(2 19 36)) 2 1) #(if (ly:version? >= '(2 19 42)) #{ \\override StaffSymbol.ledger-positions-function = #cn-ledger-positions \\override StaffSymbol.cn-ledger-recipe = #cn-ledgers-gradual #} #{ #}) #(if (ly:version? < '(2 19 18)) #{ \\override Dots.before-line-breaking = #cn-dots-grob-callback #} #{ #}) \\consists \\Cn_clef_ottava_engraver \\consists \\Cn_key_signature_engraver } } \\midi { \\context { \\Staff cnBaseStaffLines = #'(-8 -4) } \\context { \\Staff \\name TradStaff \\alias Staff } \\context { \\Score \\accepts TradStaff } \\context { \\ChoirStaff \\accepts TradStaff } \\context { \\GrandStaff \\accepts TradStaff } \\context { \\PianoStaff \\accepts TradStaff } \\context { \\StaffGroup \\accepts TradStaff } }"
});

